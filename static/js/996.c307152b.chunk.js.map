{"version":3,"file":"static/js/996.c307152b.chunk.js","mappings":"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","sources":["components/AuthForm/LoginForm.styled.js","components/AuthForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.styled.js","pages/RegisterPage/RegisterPage.jsx","schemas/authSchema.js"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport colors from \"../../styles/theme\";\nimport { Field } from \"formik\";\nimport { Link as link } from \"react-router-dom\";\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const Text = styled.h1`\n  font-size: 24px;\n  font-weight: 700;\n  color: ${colors.colors.primaryBtnText};\n  line-height: 1.4;\n  letter-spacing: 0.04em;\n  margin-top: 42px;\n  margin-bottom: 40px;\n`;\n\nexport const Input = styled(Field)`\n  width: 280px;\n  height: 40px;\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n  background: #fdf7f2;\n  font-size: 14px;\n  line-height: 19px;\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n  letter-spacing: 0.04em;\n  color: rgba(17, 17, 17, 0.6);\n  :hover {\n    border: 1px solid rgba(245, 146, 86, 0.5);\n  }\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  border-color: #f59256;\n  border-radius: 40px;\n  width: 280px;\n  height: 44px;\n  padding: 10px 28px;\n  color: white;\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 1.4;\n  letter-spacing: 0.04em;\n  background: ${colors.colors.accent};\n  margin-top: 40px;\n  :hover {\n    background-color: #995024;\n  }\n`;\n\nexport const ErrorText = styled.p`\n  color: red;\n  text-align: center;\n  margin-top: 10px;\n`;\n\nexport const LinkBox = styled.p`\n  display: flex;\n  justify-content: center;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.34;\n  color: ${colors.colors.greyText};\n  letter-spacing: 0.04em;\n  margin-top: 40px;\n`;\n\nexport const Link = styled(link)`\n  text-decoration-line: underline;\n  color: blue;\n  margin-left: 5px;\n`;\n","import { Formik, Form, ErrorMessage } from \"formik\";\nimport { useState } from \"react\";\nimport { stepOneRegistSchema, stepTwoRegistSchema } from \"schemas/authSchema\";\nimport { Container, Text, Input, Button, LinkBox, Link, ErrorText } from \"./LoginForm.styled\";\n\nimport { useRegisterMutation } from \"redux/auth/authApi\";\n\nconst FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <ErrorText>{message}</ErrorText>} />;\n};\n\nexport const RegisterForm = () => {\n  const [data, setData] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    name: \"\",\n    location: \"\",\n    phone: \"\",\n  });\n  const [register, status] = useRegisterMutation();\n\n  const [currentStep, setCurrentStep] = useState(0);\n  //   const [errors, setErrors] = useState({});\n\n  const makeRequest = formData => {\n    console.log(formData);\n\n    const { email, password, name, location: address, phone } = formData;\n    register({ email, password, name, address, phone })\n      .unwrap()\n      .then(payload => {\n        console.log(`User successfully registered`);\n        // navigate(\"/\"); if success - navigate user to userPage\n      })\n      .catch(() => console.log(\"Handle errors\"));\n\n    console.log(status);\n  };\n\n  const handleNextStep = (newData, final = false) => {\n    setData(prev => ({ ...prev, ...newData }));\n    if (final) {\n      makeRequest(newData);\n      return;\n    }\n    setCurrentStep(prev => prev + 1);\n  };\n\n  const handlePrevStep = newData => {\n    setData(prev => ({ ...prev, ...newData }));\n    setCurrentStep(prev => prev - 1);\n  };\n\n  const steps = [\n    <StepOne\n      next={handleNextStep}\n      data={data}\n      // errors={errors}\n    />,\n    <StepTwo next={handleNextStep} prev={handlePrevStep} data={data} />,\n  ];\n\n  // console.log(data);\n  return (\n    <>\n      <Container>\n        <Text>Registration</Text>\n        {steps[currentStep]}\n        <LinkBox>\n          Already have an account? <Link to={\"/login\"}>Login</Link>\n        </LinkBox>\n      </Container>\n    </>\n  );\n};\n//   const handleSubmit = async (values, actions) => {\n//     console.log(values);\n//     console.log(actions);\n//     // setEmail (values.email);\n//     // setPassword (values.password);\n//     await new Promise(resolve => setTimeout(resolve, 1000));\n//     // await onSubmit(values);\n//     actions.resetForm();\n//   };\n\nconst StepOne = props => {\n  const handleSubmit = values => {\n    // console.log(values);\n    props.next(values);\n  };\n  return (\n    <Formik initialValues={props.data} validationSchema={stepOneRegistSchema} onSubmit={handleSubmit}>\n      {() => (\n        <Form autoComplete=\"off\">\n          <label htmlFor=\"email\">\n            <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Email\" />\n            <FormError name=\"email\" />\n          </label>\n          <label htmlFor=\"password\">\n            <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" />\n            <FormError name=\"password\" />\n          </label>\n          <label htmlFor=\"confirmPassword\">\n            <Input type=\"password\" name=\"confirmPassword\" id=\"confirmPassword\" placeholder=\"Confirm Password\" />\n            <FormError name=\"confirmPassword\" />\n          </label>\n          <Button type=\"submit\">Next</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nconst StepTwo = props => {\n  const handleSubmit = values => {\n    props.next(values, true);\n  };\n  return (\n    <Formik initialValues={props.data} validationSchema={stepTwoRegistSchema} onSubmit={handleSubmit}>\n      {({ values }) => (\n        <Form autoComplete=\"off\">\n          <label htmlFor=\"name\">\n            <Input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Name\" />\n            <FormError name=\"name\" />\n          </label>\n          <label htmlFor=\"location\">\n            <Input type=\"text\" name=\"location\" id=\"location\" placeholder=\"City, region\" />\n            <FormError name=\"location\" />\n          </label>\n          <label htmlFor=\"phone\">\n            <Input type=\"tel\" name=\"phone\" id=\"phone\" placeholder=\"Mobile phone\" />\n            <FormError name=\"phone\" />\n          </label>\n          <Button type=\"button\" onClick={() => props.prev(values)}>\n            Back\n          </Button>\n          <Button type=\"submit\">Register</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\n  position: absolute;\n  width: 320px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: ${p => p.theme.colors.background};\n`;\n\nexport const Gradient = styled.img`\n  position: absolute;\n  z-index: -1;\n  height: 190px;\n  width: 100%;\n  top: 380px;\n`;\n","import { RegisterForm } from \"components/AuthForm/RegisterForm\";\nimport { Container, Gradient } from \"./RegisterPage.styled\";\nimport waves from \"img/authPages-photos/waves-mobile.png\";\n\nconst RegisterPage = () => {\n  return (\n    <Container>\n      <Gradient src={waves} alt=\"Decorating waves\" />\n      <RegisterForm />\n    </Container>\n  );\n};\n\nexport default RegisterPage;\n","import * as yup from \"yup\";\n\nconst passwordRules = /^(?!.* ).{7,32}$/;\n// const phoneRules = /^[+]d{3}s[(]d{2}[)]sd{3}[-]d{2}[-]d{2}/;\n\nexport const loginSchema = yup.object().shape({\n  email: yup.string().email(\"Please enter a valid email\").required(),\n  password: yup\n    .string()\n    .min(7, \"Password must be at least 7 characters long\")\n    .max(32, \"Password must be at most 32 characters\")\n    .matches(passwordRules, { message: \"Please enter password without spaces\" })\n    .required(),\n});\n\nexport const stepOneRegistSchema = yup.object().shape({\n  email: yup.string().email(\"Please enter a valid email\").required(),\n  password: yup\n    .string()\n    .min(7, \"Password must be at least 7 characters long\")\n    .max(32, \"Password must be at most 32 characters\")\n    .matches(passwordRules, { message: \"Please enter password without spaces\" })\n    .required(),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref(\"password\"), null], \"Passwords must match\")\n    .required(),\n});\n\nexport const stepTwoRegistSchema = yup.object().shape({\n  name: yup.string().required(),\n  location: yup.array().of(yup.string()).nullable(),\n  phone: yup\n    .number()\n    .typeError(\"That doesn't look like a phone number\")\n    .positive(\"A phone number can't start with a minus\")\n    .integer(\"A phone number can't include a decimal point\")\n    .min(8)\n    // .matches(phoneRules, { message: \"Please enter a string in format +380671234567\" })\n    .required(\"A phone number is required\"),\n});\n"],"names":["Container","styled","Text","colors","Input","Field","Button","ErrorText","LinkBox","Link","link","FormError","name","render","message","RegisterForm","useState","email","password","confirmPassword","location","phone","data","setData","useRegisterMutation","register","status","currentStep","setCurrentStep","makeRequest","formData","console","log","address","unwrap","then","payload","catch","handleNextStep","newData","final","prev","steps","StepOne","next","StepTwo","to","props","initialValues","validationSchema","stepOneRegistSchema","onSubmit","values","autoComplete","htmlFor","type","id","placeholder","stepTwoRegistSchema","onClick","p","theme","background","Gradient","src","waves","alt","passwordRules","loginSchema","yup","shape","required","min","max","matches","oneOf","of","nullable","typeError","positive","integer"],"sourceRoot":""}