{"version":3,"file":"static/js/760.1a372c81.chunk.js","mappings":"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","sources":["components/AuthForm/LoginForm.styled.js","components/AuthForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","schemas/authSchema.js"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport colors from \"../../styles/theme\";\nimport { Field } from \"formik\";\nimport { Link as link } from \"react-router-dom\";\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const Text = styled.h1`\n  font-size: 24px;\n  font-weight: 700;\n  color: ${colors.colors.primaryBtnText};\n  line-height: 1.4;\n  letter-spacing: 0.04em;\n  margin-top: 42px;\n  margin-bottom: 40px;\n`;\n\nexport const Input = styled(Field)`\n  width: 280px;\n  height: 40px;\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n  background: ${colors.colors.background};\n  font-size: 14px;\n  line-height: 1.4;\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n  letter-spacing: 0.04em;\n  color: ${colors.colors.greyText};\n  padding: 12px 14px;\n  /* :hover {\n    border: 1px solid rgba(245, 146, 86, 0.5);\n  } */\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  border-color: #f59256;\n  border-radius: 40px;\n  width: 280px;\n  height: 44px;\n  padding: 10px 28px;\n  color: white;\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 1.4;\n  letter-spacing: 0.04em;\n  background: ${colors.colors.accent};\n  margin-top: 40px;\n  :hover {\n    background-color: #995024;\n  }\n`;\n\nexport const ErrorText = styled.p`\n  color: red;\n  text-align: center;\n  margin-top: -5px;\n  margin-bottom: 15px;\n`;\n\nexport const LinkBox = styled.p`\n  display: flex;\n  justify-content: center;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.34;\n  color: ${colors.colors.greyText};\n  letter-spacing: 0.04em;\n  margin-top: 40px;\n`;\n\nexport const Link = styled(link)`\n  text-decoration-line: underline;\n  color: blue;\n  margin-left: 5px;\n`;\n","import { Formik, Form, ErrorMessage } from \"formik\";\nimport { Container, Text, Input, Button, ErrorText, LinkBox, Link } from \"./LoginForm.styled\";\nimport { loginSchema } from \"schemas/authSchema\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useLoginMutation } from \"redux/auth/authApi\";\n// import { toast } from \"react-toastify\";\n\nconst initialValues = {\n  email: \"\",\n  password: \"\",\n};\n\nconst FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <ErrorText>{message}</ErrorText>} />;\n};\n\nexport const LoginForm = () => {\n  const [login, status] = useLoginMutation();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (values, actions) => {\n    const { email, password } = values;\n    login({ email, password })\n      .unwrap()\n      .then(payload => {\n        console.log(`User successfully registered`);\n        navigate(\"/\");\n      })\n      .catch(() => {\n        console.log(\"Handle errors\");\n        // toast.error(\"Sorry, your email or password is incorrect! Try again!\");\n      });\n\n    console.log(status);\n\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    actions.resetForm();\n  };\n\n  return (\n    <Container>\n      <Text>Login</Text>\n      <Formik initialValues={initialValues} validationSchema={loginSchema} onSubmit={handleSubmit}>\n        {({ isSubmitting }) => (\n          <Form autoComplete=\"off\">\n            <label htmlFor=\"email\">\n              <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Email\" />\n              <FormError name=\"email\" />\n            </label>\n            <label htmlFor=\"password\">\n              <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" />\n              <FormError name=\"password\" />\n            </label>\n            <Button disabled={isSubmitting} type=\"submit\">\n              Login\n            </Button>\n          </Form>\n        )}\n      </Formik>\n      <LinkBox>\n        Don't have an account? <Link to={\"/register\"}>Register</Link>\n      </LinkBox>\n    </Container>\n  );\n};\n","import { LoginForm } from \"components/AuthForm/LoginForm\";\n// import { Container } from './LoginPage.styled';\n\nconst LoginPage = () => {\n  return (\n    // <Container>\n    <LoginForm />\n    // </Container>\n  );\n};\n\nexport default LoginPage;\n","import * as yup from \"yup\";\n\nconst passwordRules = /^(?!.* ).{7,32}$/;\nconst locationRules = /^(?=.*[a-zа-я])(?=.*[A-ZА-Я]).{3,32},(?=.*[a-zа-я])(?=.*[A-ZА-Я]).{3,32}$/;\nconst phoneRules = /[+380]+[0-9].{11}/;\n\nexport const loginSchema = yup.object().shape({\n  email: yup.string().email(\"Please enter a valid email\").required(),\n  password: yup\n    .string()\n    .min(7, \"Password must be at least 7 characters long\")\n    .max(32, \"Password must be at most 32 characters\")\n    .matches(passwordRules, { message: \"Please enter password without spaces\" })\n    .required(),\n});\n\nexport const stepOneRegistSchema = yup.object().shape({\n  email: yup.string().email(\"Please enter a valid email\").required(),\n  password: yup\n    .string()\n    .min(7, \"Password must be at least 7 characters long\")\n    .max(32, \"Password must be at most 32 characters\")\n    .matches(passwordRules, { message: \"Please enter password without spaces\" })\n    .required(),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref(\"password\"), null], \"Passwords must match\")\n    .required(),\n});\n\nexport const stepTwoRegistSchema = yup.object().shape({\n  name: yup.string().required(),\n  location: yup.string().matches(locationRules, { message: \"Please enter a string in format city, region\" }).required(),\n  phone: yup.string().min(8).matches(phoneRules, { message: \"Please enter a string in format +380671234567\" }).required(\"A phone number is required\"),\n});\n"],"names":["Container","styled","Text","colors","Input","Field","Button","ErrorText","LinkBox","Link","link","initialValues","email","password","FormError","name","render","message","LoginForm","useLoginMutation","login","status","navigate","useNavigate","handleSubmit","values","actions","unwrap","then","payload","console","log","catch","Promise","resolve","setTimeout","resetForm","validationSchema","loginSchema","onSubmit","isSubmitting","autoComplete","htmlFor","type","id","placeholder","disabled","to","passwordRules","yup","shape","required","min","max","matches","stepOneRegistSchema","confirmPassword","oneOf","stepTwoRegistSchema","location","phone"],"sourceRoot":""}